#!/bin/sh /etc/rc.common
# simet-lmapd - SIMET2 Measurement Agent LMAP scheduler
# Copyright (c) 2019 NIC.br
# Distributed under the GPLv3+

START=99
STOP=10
USE_PROCD=1

# Note: multi-instance not supported yet
LMAP_INSTANCE_LIST=main
LMAP_OPTS="-j"

do_prepare_common() {
	# SIMET_CFG_LOAD_ERROR is also internally set in simet_lib_config.sh
	SIMET_CFG_LOAD_ERROR=
	. /usr/lib/simet/simet_lib_config.sh || SIMET_CFG_LOAD_ERROR=1
	if [ -n "$SIMET_CFG_LOAD_ERROR" ] ; then
		echo "$0: syntax errors in the configuration files, aborting..." >&2
		return 1
	fi
	. /usr/lib/simet/simet_lib_lmapd.sh || {
		echo "$0: failed to load simet_lib_lmapd.sh, aborting..." >&2
		return 1
	}
	#shellcheck disable=SC2015
	LMAP_INSTANCE_LIST=$(lmapd_get_instance_list) && [ -n "$LMAP_INSTANCE_LIST" ] || {
		echo "$0: simet_lib_lmapd.sh::lmapd_get_instance_list failed, aborting..." >&2
		return 1
	}
}

x_paranoid_mkdir() {
	[ -z "$1" ] && {
		printf "%s: internal error, missing path to paranoid_mkdir\n", "$0" >&2
		return 2
	}
	MKDIRMODE="$2" || :
	[ -z "$MKDIRMODE" ] && MKDIRMODE=02770
	#shellcheck disable=SC2015,SC2174
	[ -n "$1" ] && mkdir -p -m 0700 "$1" && [ -d "$1" ] || {
		printf "%s: failed to create directory %s\n" "$0" "$1" >&2
		return 1
	}
	find "$1" -maxdepth 0 -type d ! -group nicbr-simet -exec chgrp nicbr-simet '{}' +
	find "$1" -maxdepth 0 -type d ! -perm "$MKDIRMODE" -exec chmod "$MKDIRMODE" '{}' +
	:
}

x_force_group_files() {
	#shellcheck disable=SC2015
	[ -n "$1" ] && [ -d "$1" ] || {
		printf "%s: not a directory: %s" "$0" "$1" >&2
		return 1
	}
	find "$1" -type f ! \( -user nicbr-simet -a -group nicbr-simet \) -exec chown "nicbr-simet:nicbr-simet" '{}' +
	find "$1" -type f ! -perm -g+r -exec chmod g+r '{}' +
	:
}

#note: also sourced by cronjob to self-heal permissions
init_lmapd_fs() {
	do_prepare_common || exit 2

	x_paranoid_mkdir /var/run/lmapd 02775
	x_force_group_files /var/run/lmapd
	x_paranoid_mkdir /var/spool/lmapd 02770
	x_paranoid_mkdir /var/spool/lmapd/queue 02770
	x_paranoid_mkdir /var/spool/lmapd/reports 02770
	[ -d /var/spool/lmapd ] && {
		find /var/spool/lmapd -type d ! -group nicbr-simet -exec chgrp nicbr-simet '{}' +
		find /var/spool/lmapd -type d ! -perm -g+rwsx -exec chmod g+rwsx,o= '{}' +
	}
	x_force_group_files /var/spool/lmapd

	# might race a fetch script, and we don't want to clobber the
	# downloaded schedule, so ln -s (not -sf), which might fail
	[ -e /var/run/lmapd/lmap-schedule.json ] || \
		ln -s /usr/lib/simet/lmap-emergency-schedule.json \
		      /var/run/lmapd/lmap-schedule.json 2>/dev/null || true
	chown -h nicbr-simet:nicbr-simet /var/run/lmapd/*json || true
	find /var/run/lmapd -type f -name '*json' ! -perm -0660 -exec chmod ug+rw,o-w '{}' +
	find /var/run/lmapd -perm -0002 -exec chmod o-w '{}' +

	x_paranoid_mkdir /etc/simet 02770
	x_paranoid_mkdir /etc/simet/lmap 02770
	find /etc/simet -type f ! \( -user nicbr-simet -a -group nicbr-simet \) -exec chown "nicbr-simet:nicbr-simet" '{}' +
	find /etc/simet -type f ! -perm -0660 -exec chmod ug+rw,o= '{}' +
}

# FIXME: refuse to start the lmapd if the engine is disabled
boot() {
	init_lmapd_fs
	# delay start of the measurement engine to lessen the RAM+CPU
	# load during boot.  We might switch to a lmap-suppression-based
	# scheme eventually.
	( sleep 120 ; start "$@" ) </dev/null >/dev/null 2>&1 &
}

reload_service() {
	do_prepare_common

	chown -h nicbr-simet:nicbr-simet /var/run/lmapd/*json 2>/dev/null || true
	find /var/run/lmapd -type f -name '*json' \! -perm -0660 -exec chmod ug+rw,o-w {} +

	find /etc/simet/lmap -type f -name '*.json' ! \( -user nicbr-simet -a -group nicbr-simet \) -exec chown "nicbr-simet:nicbr-simet" '{}' +
	find /etc/simet/lmap -type f -name '*.json' ! -perm -0660 -exec chmod ug+rw,o= '{}' +

	if lmapd_lmapctl_validate "$(lmapd_get_sched_filename main)" >/dev/null 2>&1 ; then
		lmapd_lmapctl_reload main
		return 0
	else
		echo "%0: lmapd configuration invalid, not reloading" >&2
		return 1
	fi
}

start_service() {
	init_lmapd_fs

	[ -n "$LMAP_RUN_DIR_PREFIX" ] || return 2
	QDIR=$(lmapd_get_queuedir main) && [ -d "$QDIR" ] || return 1
	RDIR=$(lmapd_get_rundir main) && [ -d "$RDIR" ] || return 1
	SCHEDULE=$(lmapd_get_sched_filename main) && [ -n "$SCHEDULE" ] || return 1

	procd_open_instance simet-lmapd
	procd_set_param user nicbr-simet
	procd_set_param respawn 1800 60 10
	procd_set_param stderr 1
	procd_set_param stdout 1
	procd_set_param command /usr/bin/lmapd $LMAP_OPTS -q "$QDIR" -r "$RDIR" -c+ -c "$SCHEDULE"
	lmapd_lmapctl_validate "$SCHEDULE" || procd_set_param error "lmapd configuration invalid"
	procd_close_instance
}

