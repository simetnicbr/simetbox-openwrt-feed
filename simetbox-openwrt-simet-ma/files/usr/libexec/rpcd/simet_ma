#!/bin/sh
# SIMET-MA rpcd module for OpenWRT
# Copyright (C) 2020 by NIC.br <medicoes@simet.nic.br>
# Distributed under the GPLv3+ license

_jsonify_unquoted() {
  local vf1
  vf1=
  printf "{ "
  while [ $# -ge 2 ] ; do
    [ -n "$1" ] && [ -n "$2" ] && {
      printf "$vf1\"%s\":\"%s\"" "$1" "$2"
      vf1=","
    }
    shift 2
  done
  printf " }\n"
}

geolocate() {
  GEO=$(simet_geolocation.sh "$@" 2>/dev/null) && \
    GEO=$(printf %s "$GEO" | jsonfilter -e "timestamp=@.row[0].value[0]" -e "lat=@.row[0].value[3]" -e "long=@.row[0].value[4]") && \
      eval "$GEO" || {
        echo "{ }"
        return 0
      }
  echo "{ \"timestamp\":\"$timestamp\",\"latitude\":\"$lat\",\"longitude\":\"$long\" }"
  :
}

is_measurement_running() {
  [ -f /var/lock/simet/simet-ma.lock ] || return 1
  flock -s -n /var/lock/simet/simet-ma.lock -c true && return 1
  :
}

case "$1" in
  list)
    echo '{ "simet_engine_status":{}, "renew_registration":{}, "refresh_schedule":{}, '\
           '"wan_status":{}, '\
           '"geolocate":{"force":false,"fast":true}, '\
           '"start_measurement_run":{} }'
    ;;
  call)
    case "$2" in
      renew_registration)
        # FIXME: run as root or as nicbr-simet ?
        RC=0
        simet_register_ma.sh >/dev/null 2>&1 || RC=$?
        echo "{ \"status\":$RC }"
        ;;
      refresh_schedule)
        # FIXME: run as root or as nicbr-simet ?
        RC=0
        simetbox_lmap-fetch-schedule.sh >/dev/null 2>&1 || RC=$?
        echo "{ \"status\":$RC }"
        ;;
      geolocate)
        fast=true
        force=false
        input=$(cat) || input=
        [ -n "$input" ] && {
          fast=$(jsonfilter -s "$input" -e '@.fast') || fast=true
          force=$(jsonfilter -s "$input" -e '@.force') || force=false
        }
        if [ "$force" = "true" ] ; then
          # simple rate limit...
          geolocate --max-age 3600
        elif [ "$fast" != "false" ] ; then
          geolocate --from-cache
        else
          geolocate
        fi
        ;;
      start_measurement_run)
        if is_measurement_running ; then
          echo '{ "status": "already running" }'
        elif start-stop-daemon -S -b -c nicbr-simet -x /usr/bin/simet-ma_run.sh && sleep 1 && is_measurement_running ; then
          echo '{ "status": "started" }'
        else
          echo '{ "status": "failed" }'
        fi
        ;;
      simet_engine_status)
        au_enabled=true
        au_measurement_running=false
        au_version=$(cat /usr/lib/simet/agent-version.txt) || au_version=
        [ "$au_enabled" = "true" ] && is_measurement_running && au_measurement_running=true
        echo "{ \"enabled\":$au_enabled, \"version\":\"$au_version\", \"main_measurement_running\":\"$au_measurement_running\" }"
        ;;
      wan_status)
        wan_s="false"
        wan6_s="false"
        gw_s="false"
        gw6_s="false"

        . /lib/functions/network.sh >/dev/null 2>&1 || exit 1
        network_find_wan IP4WAN false && network_is_up "$IP4WAN" && {
          wan_s="true"
          network_get_gateway IP4GW "$IP4WAN" && \
            ping -4 -c 2 -W 1 -n "$IP4GW" >/dev/null 2>&1 && \
              gw_s="true"
        }
        network_find_wan6 IP6WAN false && network_is_up "$IP6WAN" && {
          wan6_s="true"
          network_get_gateway6 IP6GW "$IP6WAN" && \
            network_get_device IP6L3DEV "$IP6WAN" && [ -n "$IP6L3DEV" ] && \
            ping -6 -c 2 -W 1 -n -I "$IP6L3DEV" "$IP6GW" >/dev/null 2>&1 && \
              gw6_s="true"
        }

        _jsonify_unquoted ip4_wan_status "$wan_s" ip4_gateway_ping "$gw_s" ip6_wan_status "$wan6_s" ip6_gateway_ping "$gw6_s"
        ;;
    esac
    ;;
esac
:

